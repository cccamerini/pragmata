{"ast":null,"code":"class Pixel {\n  constructor(x, y, val) {\n    this.x = x;\n    this.y = y;\n    this.w = 30;\n    this.h = 30;\n    this.val = val; // this.mask=document.createElement(\"canvas\");\n    // this.mask.width=w;\n    // this.mask.height=h;\n    // const maskCtx=this.mask.getContext(\"2d\");\n    // this.img.onload=()=>{\n    //     maskCtx.fillStyle=color;\n    //     maskCtx.rect(0,0,this.w,this.h);\n    //     maskCtx.fill();\n    //     maskCtx.globalCompositeOperation=\"destination-atop\";\n    //     maskCtx.drawImage(this.img,0,0,this.width,this.height);\n    // }\n  } // #createPolygon(){\n  //     const points=[];\n  //     const rad=Math.hypot(this.width,this.height)/2;\n  //     const alpha=Math.atan2(this.width,this.height);\n  //     points.push({\n  //         x:this.x-Math.sin(this.angle-alpha)*rad,\n  //         y:this.y-Math.cos(this.angle-alpha)*rad\n  //     });\n  //     points.push({\n  //         x:this.x-Math.sin(this.angle+alpha)*rad,\n  //         y:this.y-Math.cos(this.angle+alpha)*rad\n  //     });\n  //     points.push({\n  //         x:this.x-Math.sin(Math.PI+this.angle-alpha)*rad,\n  //         y:this.y-Math.cos(Math.PI+this.angle-alpha)*rad\n  //     });\n  //     points.push({\n  //         x:this.x-Math.sin(Math.PI+this.angle+alpha)*rad,\n  //         y:this.y-Math.cos(Math.PI+this.angle+alpha)*rad\n  //     });\n  //     return points;\n  // }\n\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.rect(-this.w / 2, -this.h / 2, this.w, this.h);\n    ctx.fill();\n  }\n\n}","map":{"version":3,"names":["Pixel","constructor","x","y","val","w","h","draw","ctx","beginPath","rect","fill"],"sources":["C:/Users/cccam/OneDrive/Documentos/source/vscode/pragmata/src/pages/pixel.js"],"sourcesContent":["class Pixel {\r\n    constructor(x, y, val) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = 30;\r\n        this.h = 30;\r\n        this.val = val;\r\n\r\n        // this.mask=document.createElement(\"canvas\");\r\n        // this.mask.width=w;\r\n        // this.mask.height=h;\r\n\r\n        // const maskCtx=this.mask.getContext(\"2d\");\r\n        // this.img.onload=()=>{\r\n        //     maskCtx.fillStyle=color;\r\n        //     maskCtx.rect(0,0,this.w,this.h);\r\n        //     maskCtx.fill();\r\n\r\n        //     maskCtx.globalCompositeOperation=\"destination-atop\";\r\n        //     maskCtx.drawImage(this.img,0,0,this.width,this.height);\r\n        // }\r\n    }\r\n\r\n    // #createPolygon(){\r\n    //     const points=[];\r\n    //     const rad=Math.hypot(this.width,this.height)/2;\r\n    //     const alpha=Math.atan2(this.width,this.height);\r\n    //     points.push({\r\n    //         x:this.x-Math.sin(this.angle-alpha)*rad,\r\n    //         y:this.y-Math.cos(this.angle-alpha)*rad\r\n    //     });\r\n    //     points.push({\r\n    //         x:this.x-Math.sin(this.angle+alpha)*rad,\r\n    //         y:this.y-Math.cos(this.angle+alpha)*rad\r\n    //     });\r\n    //     points.push({\r\n    //         x:this.x-Math.sin(Math.PI+this.angle-alpha)*rad,\r\n    //         y:this.y-Math.cos(Math.PI+this.angle-alpha)*rad\r\n    //     });\r\n    //     points.push({\r\n    //         x:this.x-Math.sin(Math.PI+this.angle+alpha)*rad,\r\n    //         y:this.y-Math.cos(Math.PI+this.angle+alpha)*rad\r\n    //     });\r\n    //     return points;\r\n    // }\r\n\r\n    draw(ctx) {\r\n        ctx.beginPath();\r\n        ctx.rect(\r\n            -this.w/2,\r\n            -this.h/2,\r\n            this.w,\r\n            this.h\r\n        );\r\n        ctx.fill();\r\n    }\r\n}"],"mappings":"AAAA,MAAMA,KAAN,CAAY;EACRC,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,GAAP,EAAY;IACnB,KAAKF,CAAL,GAASA,CAAT;IACA,KAAKC,CAAL,GAASA,CAAT;IACA,KAAKE,CAAL,GAAS,EAAT;IACA,KAAKC,CAAL,GAAS,EAAT;IACA,KAAKF,GAAL,GAAWA,GAAX,CALmB,CAOnB;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;EACH,CArBO,CAuBR;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEAG,IAAI,CAACC,GAAD,EAAM;IACNA,GAAG,CAACC,SAAJ;IACAD,GAAG,CAACE,IAAJ,CACI,CAAC,KAAKL,CAAN,GAAQ,CADZ,EAEI,CAAC,KAAKC,CAAN,GAAQ,CAFZ,EAGI,KAAKD,CAHT,EAII,KAAKC,CAJT;IAMAE,GAAG,CAACG,IAAJ;EACH;;AAvDO"},"metadata":{},"sourceType":"module"}